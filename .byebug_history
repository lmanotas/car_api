c
json_response["cars"].length
json_response["cars"]
json_response
c
json_response
c
json_response
car
c
car[:description]
car['description']
car
c
cars_around.count
cars_around
c
DB[:locations].where("ST_DWithin(geom, ST_SetSRID(ST_Point(#{lon}, #{lat}), #{SRID}), 30000)").to_a
DB[:locations].where("ST_DWithin(geom, ST_SetSRID(ST_Point(#{lon}, #{lat}), #{SRID}), 30000)")
DB[:locations].to_a
exit
DB.run('SELECT * FROM locations').to_a
DB[:locations].where('geom = 1').to_a
DB[:locations].where('geom = 1')
DB[:locations].where('geom = ')
DB[:locations]
DB[:locations].run('SELECT')
DB[:locations]
DB.run('SELECT * FROM locations')
DB.
DB.run('select * from locations')
DB.run('select * from locations;')
DB.run('select * from locations')
DB.run(query)
cars_around
c
cars_around
c
cars_around.count
cars_around
c
cars_around.run
cars_around
cars_around.count
cars_around
c
lat
lon
lon, lat = params[:location].split(',')
params[:location].split(',')
params.class
params[:location]
params["location"]
params["loxation"]
params
c
JSON.parse(last_response.body)["error"]["code"]
exit
JSON.parse(last_response.body)["error"]["code"]
JSON.parse(last_response.body)["error"]
JSON.parse(last_response.body)["error"]["code"]
JSON.parse(last_response.body)
last_response.body
last_response
